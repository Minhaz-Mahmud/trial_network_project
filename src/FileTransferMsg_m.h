//
// Generated file, do not edit! Created by opp_msgtool 6.2 from FileTransferMsg.msg.
//

#ifndef __FILETRANSFERMSG_M_H
#define __FILETRANSFERMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0602
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class FileTransferMsg;
/**
 * Class generated from <tt>FileTransferMsg.msg:1</tt> by opp_msgtool.
 * <pre>
 * packet FileTransferMsg
 * {
 *     // Message types
 *     int msgType;           // 1=READ_REQUEST (download)
 *                           // 2=DATA
 *                           // 3=ACK
 *                           // 4=ERROR
 *                           // 5=KEY_EXCHANGE
 *                           // 6=WRITE_REQUEST (upload)
 * 
 *     // Transfer info
 *     int seqNum = 0;
 *     int totalChunks = 0;
 *     string filename;
 *     int fileSize = 0;
 *     int chunkSize = 0;
 *     string data;
 *     bool isLastChunk = false;
 * 
 *     // Encryption fields
 *     bool encrypted = false;
 *     int encryptionKey = 0;
 *     string checksum;
 *     int originalSize = 0;
 * 
 *     // Client identification
 *     int clientId = 0;      // Identifies which client
 * }
 * </pre>
 */
class FileTransferMsg : public ::omnetpp::cPacket
{
  protected:
    int msgType = 0;
    int seqNum = 0;
    int totalChunks = 0;
    omnetpp::opp_string filename;
    int fileSize = 0;
    int chunkSize = 0;
    omnetpp::opp_string data;
    bool isLastChunk_ = false;
    bool encrypted = false;
    int encryptionKey = 0;
    omnetpp::opp_string checksum;
    int originalSize = 0;
    int clientId = 0;

  private:
    void copy(const FileTransferMsg& other);

  protected:
    bool operator==(const FileTransferMsg&) = delete;

  public:
    FileTransferMsg(const char *name=nullptr, short kind=0);
    FileTransferMsg(const FileTransferMsg& other);
    virtual ~FileTransferMsg();
    FileTransferMsg& operator=(const FileTransferMsg& other);
    virtual FileTransferMsg *dup() const override {return new FileTransferMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMsgType() const;
    virtual void setMsgType(int msgType);

    virtual int getSeqNum() const;
    virtual void setSeqNum(int seqNum);

    virtual int getTotalChunks() const;
    virtual void setTotalChunks(int totalChunks);

    virtual const char * getFilename() const;
    virtual void setFilename(const char * filename);

    virtual int getFileSize() const;
    virtual void setFileSize(int fileSize);

    virtual int getChunkSize() const;
    virtual void setChunkSize(int chunkSize);

    virtual const char * getData() const;
    virtual void setData(const char * data);

    virtual bool isLastChunk() const;
    virtual void setIsLastChunk(bool isLastChunk);

    virtual bool getEncrypted() const;
    virtual void setEncrypted(bool encrypted);

    virtual int getEncryptionKey() const;
    virtual void setEncryptionKey(int encryptionKey);

    virtual const char * getChecksum() const;
    virtual void setChecksum(const char * checksum);

    virtual int getOriginalSize() const;
    virtual void setOriginalSize(int originalSize);

    virtual int getClientId() const;
    virtual void setClientId(int clientId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FileTransferMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FileTransferMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline FileTransferMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<FileTransferMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FILETRANSFERMSG_M_H

